<?php
    $_product = $this->getProduct();
    if($_product->getTypeId() == "configurable"):
        $conf = Mage::getModel('catalog/product_type_configurable')->setProduct($_product);
        $simpleProducts_collection = $conf->getUsedProductCollection()->addAttributeToSelect('*')->addFilterByRequiredOptions();
        $imagesTissus = array(); // loads images tissus from all simple products
        foreach($simpleProducts_collection as $simple_product){
            $tissuId = $simple_product->getData('tissu');
            $images= Mage::getModel('catalog/product')->load($simple_product->getId())->getMediaGalleryImages();
            //$imagesTissus[$simple_product->getId()] = $images;
            $imagesTissus[$tissuId] = $images;
        }
    endif;
    $_helper = $this->helper('catalog/output');
    $store = Mage::app()->getStore();
    $code  = $store->getCode();
?>
<?php
    $ratio_width = Mage::getStoreConfig("trego_settings/product_view/ratio_width", $code);
    $ratio_height = Mage::getStoreConfig("trego_settings/product_view/ratio_height", $code);
    $ratio = $ratio_height / $ratio_width;
    $rnd_str = rtrim(base64_encode(md5(microtime())),"=");
?>
<?php if ($_product->getTypeId() == "simple" && count($this->getGalleryImages()) > 0): ?>
    <ul id="etalage">
    <?php
    foreach ($this->getGalleryImages()->getItemsByColumnValue('label', 'product-view') as $_image):
        ?>
        <li>
            <?php
            $image_src = $this->helper('catalog/image')->init($_product, 'thumbnail', $_image->getFile())->resize(700, 700*$ratio);
            ?>
            <a rel="gallery" class="fancy-images fancy-images_<?php echo $rnd_str; ?>" href="<?php echo $image_src; ?>"><span class="glyphicon glyphicon-search"></span></a>
            <img class="etalage_thumb_image" src="<?php echo $image_src; ?>">
            <img class="etalage_source_image" src="<?php echo $this->helper('catalog/image')->init($_product, 'thumbnail', $_image->getFile())->resize(100, 100*$ratio)?>" alt="<?php echo $this->htmlEscape($_image->getLabel()) ?>">
        </li>
    <?php
    endforeach;
    ?>

    <?php //var_dump($imagesTissus[185]); ?>
    <?php
    /*echo '<div>';
    foreach($simpleProducts_collection as $simple_product){
        echo $simple_product->getId() . " - " . $simple_product->getName() . " - " . Mage::helper('core')->currency($simple_product->getPrice()) . "<br>";
    }
    echo '</div>';*/
    ?>

    <script type="text/javascript">
        jQuery(document).ready(function(){
            reloadEtalage();
            jQuery(".product-img-box .etalage li.etalage_thumb").zoom();
            setTimeout(function(){reloadEtalage();}, 500);
            jQuery(window).resize(function(e){
                reloadEtalage();
            });
            /*jQuery('.etalage-prev').on('click', function(){
             etalage_previous();
             });

             jQuery('.etalage-next').on('click', function(){
             etalage_next();
             }); */
            jQuery("a.fancy-images_<?php echo $rnd_str; ?>").fancybox();
            function reloadEtalage(){
                var width = jQuery('.product-view .product-img-box').width() - 100;
                var src_img_width = 600;
                var src_img_height = 400;
                var ratio_width = <?php echo $ratio_width; ?>;
                var ratio_height = <?php echo $ratio_height; ?>;

                src_img_width = 700 * ratio_width / ratio_height;
                src_img_height = 700;
                var height = width * ratio_height / ratio_width;
                zoom_enabled = false;
                jQuery('#etalage').etalage({
                    /*thumb_image_width: width,
                     thumb_image_height: height,
                     source_image_width: src_img_width,
                     source_image_height: src_img_height,
                     zoom_area_width: width,
                     zoom_area_height: height,*/
                    zoom_enable: zoom_enabled,
                    smallthumb_hide_single: false,
                    smallthumbs_position: 'left',
                    show_icon: false,
                    autoplay: false
                });
                jQuery('.product-view .product-img-box .etalage-control a').css('bottom',((jQuery('.etalage_small_thumbs').height()-25)/2)+"px");
            }
        });
    </script>

    <?php
    // ****** backside image script *******
    $images= Mage::getModel('catalog/product')->load($_product->getId())->getMediaGalleryImages();
    $backsideImage = $images->getItemByColumnValue('label', 'backside');
    // var_dump($_images);
    if($backsideImage){
    ?>
        <div class="backsideImage" style="position: absolute;right: 0; bottom: 0; cursor:pointer;"><img width="80" height="110" src="<?= $backsideImage['url']; ?>"/></div>
        <script type="text/javascript">

        jQuery(document).ready(function($){
            var originalImageSrc = null;
            var sidebackImageSrc = '<?= $backsideImage['url']; ?>';
            $('.backsideImage').hover(
                function(){
                    var shownImage = $('.etalage_thumb_active .etalage_thumb_image');
                    originalImageSrc = shownImage.attr('src');
                    shownImage.attr('src',sidebackImageSrc);
                },
                function(){
                    var shownImage = $('.etalage_thumb_active .etalage_thumb_image');
                    shownImage.attr('src',originalImageSrc);
                }
            );
        });
        </script>
    <?php
    }
    ?>
<?php else: // apply customizer for configurable products?>
    <ul id="customizer">
    <?php
        $optionsDataList = array();
        foreach ($this->getGalleryImages() as $_image):
            if(!strrpos($_image->getLabel(), 'customizer||') != -1) continue;
            $image_src = strval($this->helper('catalog/image')->init($_product, 'thumbnail', $_image->getFile())->resize(700, 700*$ratio));
            if(strrpos($_image->getLabel(), 'customizer||option||') > -1){
                $explodedLabel = explode('||', $_image->getLabel());
                $optionsDataList[] = array('bi-matiere' => ($explodedLabel[3] == 'bi-matiere')?true:false, 'titre'=> $explodedLabel[4]);
                echo '<li>';
                echo '<a rel="gallery" class="customizer-option"><img style="width:80%" src="' .$image_src .'"/></a>';
                echo '</li>';
            }
        endforeach;
    ?>
    </ul>
    <canvas id="customizer-canvas-frontView" width="400" height="570" style="float:right; position: absolute; ">
    </canvas>
    <canvas id="customizer-canvas-backView" width="100" height="140" style="float:right; position: absolute; right:50px; top: 365px; background-color: rgba(255, 255, 255, 1);border: 1px solid #EFEFEF;">
    </canvas>
        <?php
        $imagesDataList = array(); // contains the data of tissus. This variable is used by the customizer
        foreach($imagesTissus as $tissuId => $imagesTissu){
            $tissuImagesData = array();
            foreach($imagesTissu as $_image){
                //echo $_image->getLabel() .'<br>';
                //echo $this->helper('catalog/image')->init($_product, 'thumbnail', $_image->getFile())->resize(108,90) .'<br>';

                if(!strrpos($_image->getLabel(), 'customizer||') != -1) continue;

                $image_src = strval($this->helper('catalog/image')->init($_product, 'thumbnail', $_image->getFile())->resize(700, 700*$ratio));
                $explodedLabel = explode('||', $_image->getLabel());
                $optionId = $explodedLabel[3];
                $zIndex = $explodedLabel[4];
                $titre = $explodedLabel[5];
                //$baseImageUrl .= $_image->getLabel() . '*****';
                if(strrpos($_image->getLabel(), 'customizer||render||front||') > -1){
                    $tissuImagesData[$optionId] = array('zIndex'=>$zIndex, 'frontViewImgUrl' => $image_src, 'selected'=>false);
                }
            }
            // attach back view img to $tissuImagesData
            foreach($imagesTissu as $_image){
                //echo $_image->getLabel() .'<br>';
                //echo $this->helper('catalog/image')->init($_product, 'thumbnail', $_image->getFile())->resize(108,90) .'<br>';

                if(!strrpos($_image->getLabel(), 'customizer||render||back') != -1) continue;

                $image_src = strval($this->helper('catalog/image')->init($_product, 'thumbnail', $_image->getFile())->resize(700, 700*$ratio));
                $explodedLabel = explode('||', $_image->getLabel());
                $optionId = $explodedLabel[3];
                if(strrpos($_image->getLabel(), 'customizer||render||back||') > -1){
                    $tissuImagesData[$optionId]['backViewImgUrl'] =  $image_src;
                }
            }
            $imagesDataList[$tissuId] = $tissuImagesData;
        }
        // var_dump($imagesDataList);
        ?>

<script type="text/javascript">
    var loadedSelectionData = null; // should contain the selection data when a customer saved selection is loaded

    <?php
        $customer = Mage::getSingleton('customer/session')->getCustomer(); // current customer
        if($customer){
            $params = $this->getRequest()->getParams();
            $selectionId = '';
            if(isset($params['selectionId'])){
                $selectionId =  $params['selectionId'];
                $selection = json_decode($customer->getSelectionCustomizer(),true);
                $selectionData = $selection[$selectionId]['selectionData'];
                echo 'loadedSelectionData = ' . json_encode($selectionData) .';';
            }
        }
    ?>

    var _canvas_frontView = document.getElementById('customizer-canvas-frontView');
    var _canvas_backView = document.getElementById('customizer-canvas-backView');
    var switcherTissu_biMatiereComponent = null;
    var selectedTypeTissuIndex = 135; //@FIXME SHould be dynamic, something like $('.tissuTypes .option')[0].attr('value');
    var selectedTissuIndex = 127; //@FIXME SHould get first key of first _jsonImagesDataAllTissus
    var selectedTissuBiMatiereIndex = null; //@FIXME SHould get first key of first _jsonImagesDataAllTissus
    var optionsData =  <?php echo json_encode($optionsDataList) ?>;
    var _jsonImagesDataAllTissus = <?php echo json_encode($imagesDataList) ?>;
    var _jsonImagesDataOfSelectedTissus = [];
    var optionsActivatedIndices = []; // stores indices of options activated
    var optionsBiMatiereActivatedIndices = []; // stores indices of options with bi-matiere applied

    jQuery(document).ready(function($){

        function _init(){
            var firstTissusOption = $('.switcher-tissu .switcher-label')[0];
            //alert(firstTissusOption.html());
            firstTissusOption.click();


            switcherTissu_biMatiereComponent = $('.switcher-tissu').clone();
            switcherTissu_biMatiereComponent.attr('id',''); // fix: erase the id, so that it stops being affected of a selector applied on the original element
            switcherTissu_biMatiereComponent.find('.chooseTissu').slideUp("slow");
            // remove price from cloned tissus
            $.each(switcherTissu_biMatiereComponent.find('.attributeOption'), function( index, element ) {
                var html = element.innerHTML;
                if(html.indexOf('+') > -1){ // to check if contains price
                    element.innerHTML = html.substring(0, html.indexOf('+'));
                }
            });

            _jsonImagesDataOfSelectedTissus = _jsonImagesDataAllTissus[selectedTissuIndex];

            // init bi-matiere  tissus selection labels and handle click on them
            $('#switcherTissu_biMatiere').append(switcherTissu_biMatiereComponent);
            $('#switcherTissu_biMatiere .switcher-label').each(function (index) {
                $(this).attr('id',null); // @IMPORTANT : erase all ids on cloned elements so that they are not affected by other actions
            });
            $('#switcherTissu_biMatiere .switcher-label').click( function(event) {
                event.preventDefault();
                selectedTissuBiMatiereIndex = $(this).attr('value');
                updateRendredProduct();
                // change style to selected
                $('#switcherTissu_biMatiere .switcher-label .attributeOption').removeClass('attributeOption_selected');
                $(this).find('.attributeOption').addClass('attributeOption_selected');
            });
            $('#switcherTissu_biMatiere .switcher-label')[0].click();//selected the first tissu
        }

        function loadSelectionData() {
            if (loadedSelectionData == null) return;

            // apply data to visual
            if (("optionsActivatedIndices" in loadedSelectionData)) {
                optionsActivatedIndices = loadedSelectionData['optionsActivatedIndices'];
                $.each(optionsActivatedIndices, function (index, value) {
                    var optionIndex = value - 1;
                    $(('.customizer-option:eq(' + optionIndex + ')')).click();
                });
            }

            // set data values to variables
            selectedTypeTissuIndex = loadedSelectionData['selectedTypeTissuIndex'];
            $('.tissu-types .option').each(function (index) {
                if ($(this).attr('value') == selectedTypeTissuIndex)
                    $('.tissu-types .option')[index].click();

            });

            selectedTissuIndex = loadedSelectionData['selectedTissuIndex'];
            $('#attribute963_switchers .switcher-label').each(function (index) {
                //alert(selectedTissuIndex + "," + $(this).attr('value'));
                if ($(this).attr('value') == selectedTissuIndex) {
                    $(this).click();
                }
            });

            selectedTissuBiMatiereIndex = loadedSelectionData['selectedTissuBiMatiereIndex'];
            $('#switcherTissu_biMatiere .switcher-label').each(function (index) {
                //alert(selectedTissuIndex + "," + $(this).attr('value'));
                if ($(this).attr('value') == selectedTissuBiMatiereIndex) {
                    $(this).click();
                }
            });

            //$(('#switcherTissu_biMatiere .switcher-label:eq('+selectedTissuBiMatiereIndex+')')).click();
        }

        function loadSelectedTissuResources(){
            var newJsonImagesData = _jsonImagesDataAllTissus[selectedTissuIndex].slice(); // slice() : creates a copy
            $.each( _jsonImagesDataOfSelectedTissus, function( index, option ) {
                newJsonImagesData[index].selected  = option.selected;
            });
            _jsonImagesDataOfSelectedTissus = newJsonImagesData;
            //updateRendredProduct();
        }

        /* Load base image */
        function drawImage(imgUrl, canvas){
            var img = new Image();
            img.src = imgUrl;
            img.addEventListener("load", function() {
                canvas.getContext('2d').drawImage(img,0,0,canvas.width, canvas.height);
            }, false);
        }

        /* On click draw image */

        function updateRendredProduct(){
            clearCanvas(_canvas_frontView);
            clearCanvas(_canvas_backView);
            loadSelectedTissuResources();
            drawImage(_jsonImagesDataOfSelectedTissus[0].frontViewImgUrl, _canvas_frontView);
            drawImage(_jsonImagesDataOfSelectedTissus[0].backViewImgUrl, _canvas_backView);
            // replace normal parts with these of selected bi matiere if selected
            if(selectedTissuBiMatiereIndex != null && selectedTissuBiMatiereIndex >= 0){
                var newJsonImagesData = _jsonImagesDataAllTissus[selectedTissuBiMatiereIndex].slice(); // slice() : creates a copy
                $.each(optionsBiMatiereActivatedIndices, function( index, value ) {
                    _jsonImagesDataOfSelectedTissus[value] = newJsonImagesData[value];
                    _jsonImagesDataOfSelectedTissus[value].selected = true;
                });
            }
            //alert(optionsActivatedIndices.length);
            // draw all parts
            $.each( optionsActivatedIndices, function( key, value ) {
                //alert("drawn :" + value);
                var option = _jsonImagesDataOfSelectedTissus[value];
                drawImage(option.frontViewImgUrl, _canvas_frontView);
                drawImage(option.backViewImgUrl, _canvas_backView);
            });
        }

        function clearCanvas(canvas){
            canvas.getContext('2d').clearRect ( 0 , 0 , canvas.width, canvas.height );
        }

        function applyBiMatiere(customizerOption){
            var optionIndex = customizerOption.parent().index() + 1;
            if ( jQuery.inArray(optionIndex, optionsBiMatiereActivatedIndices) == -1) {
                optionsBiMatiereActivatedIndices.push(optionIndex);
                /*$('.tissuPreview').slideUp('slow');
                $('.tissuDescription').slideUp('slow');*/
                $('.product-description').slideUp('slow');
                $('#switcherTissu_biMatiere').slideDown('slow');

                //$('#switcherTissu_biMatiere .switcher-label')[0].click();
            }else{
                // remove item from being used on bi-matiere
                optionsBiMatiereActivatedIndices.remove(optionIndex);
            }
            if(optionsBiMatiereActivatedIndices.length == 0){ // bimatiere disactivated for all options
                /*$('.tissuPreview').slideDown('slow');
                $('.tissuDescription').slideDown('slow');*/
                $('.product-description').slideDown('slow');
                $('#switcherTissu_biMatiere').slideUp('slow');
            }
            updateRendredProduct();
        }

        function bindNavigationArrowsToBlocks(){
            $('.switcher-field .navigateLeft, .switcher-field .navigateRight, .switcher-category_tissu .navigateLeft, .switcher-category_tissu .navigateRight').remove();

            $('.switcher-field, .switcher-category_tissu').prepend('<div class="navigateLeft" style="cursor:pointer;float:left; color: #fff;background-color: #000;width: 22px;height: 22px;border-radius: 17px;font-size: 13px;;margin-top: 10px;">&lt;</div>');
            $('.switcher-field, .switcher-category_tissu').append('<div class="navigateRight" style="cursor:pointer;float:right;color: #fff;background-color:#000;width: 22px;height: 22px;border-radius: 17px;font-size: 13px;margin-top: 10px;">&gt;</div>');

            $('.navigateLeft').click(function(){
                var navigationParent = $(this).parent();
                var selectedElementIndex = navigationParent.find('label.selected').index() - 2;
                if(selectedElementIndex < 0)
                    return;
                var previousElement = navigationParent.find('label')[selectedElementIndex];
                previousElement.click();
            });

            $('.navigateRight').click(function(){
                var navigationParent = $(this).parent();
                var selectedElementIndex = navigationParent.find('label.selected').index();
                if(selectedElementIndex >= navigationParent.find('label').length)
                    return;
                var nextElement = navigationParent.find('label')[selectedElementIndex];
                nextElement.click();
            });
        }

        $('.customizer-option').click( function(event) {
            event.preventDefault();
            var optionIndex = $(this).parent().index();
            //alert("optionSelected :" + (optionIndex + 1));
            if(optionsActivatedIndices.indexOf(optionIndex + 1) == -1) {
                var selectedItemZindex = _jsonImagesDataOfSelectedTissus[optionIndex + 1].zIndex;
                $.each( _jsonImagesDataOfSelectedTissus, function( index, option ) {
                    //alert("selectedItemZindex" + selectedItemZindex);
                    if (option.zIndex == selectedItemZindex) {
                        //alert("disable :" + index);
                        //alert(selectedItemZindex + ',' + option.zIndex);
                        optionsActivatedIndices.remove(index);
                        //_jsonImagesDataOfSelectedTissus[index].selected = false;
                        var liElement = $('#customizer').children().eq(index - 1); // index - 1 because we start at index = 1 ( base image is not an option)
                        var optionElement = liElement.children().first();
                        optionElement.removeClass('selected');
                        // fix : remove items from being used on bi-matiere
                        var optionElementIndex  = optionElement.parent().index() + 1;
                        optionsBiMatiereActivatedIndices.remove(optionElementIndex);
                    }
                });
                optionsActivatedIndices.push(optionIndex + 1);
                //_jsonImagesDataOfSelectedTissus[optionIndex + 1].selected = true;
                $(this).addClass('selected');
                //$(this).tooltipster('enable');
                //$(this).tooltipster('show');
            }else{
                optionsActivatedIndices.remove((optionIndex + 1));
                //_jsonImagesDataOfSelectedTissus[optionIndex + 1].selected = false;
                $(this).removeClass('selected');
                // hide bi-matiere tooltip
                //$(this).tooltipster('disable');

            }
            if(optionsData[optionIndex]['bi-matiere'] == true){
                applyBiMatiere($(this));
            }

            updateRendredProduct();

        });

        /*$('.customizer-option').mouseover(function() {
            //$('.customizer-option').tooltipster('hide');
            var optionIndex = $(this).parent().index();
            if(optionsActivatedIndices.indexOf(optionIndex + 1) != -1) {
                //$(this).tooltipster('show');
            }
        });*/

        /*$('.customizer-option').tooltipster({
            delay: 0,
            contentAsHTML: true,
            interactive:true,
            trigger: 'click',
            position: 'right',
            content: 'Bi-matière : <input type="checkbox" class="tooltip_bimatiere_apply" value="Appliquer"/>',
            functionReady: function(origin, content) {
                var customizerOption = $(this);
                var optionIndex = customizerOption.parent().index() + 1;
                if ( jQuery.inArray(optionIndex,optionsBiMatiereActivatedIndices) == -1) {
                    origin.tooltipster('content', 'Bi-matière : <input type="checkbox" class="tooltip_bimatiere_apply" />');
                }
                else {
                    origin.tooltipster('content', 'Bi-matière : <input type="checkbox" class="tooltip_bimatiere_apply" checked/>');
                }

                $('.tooltip_bimatiere_apply').click( function(){
                        applyBiMatiere(customizerOption);
                        customizerOption.tooltipster('hide');
                    }
                );
            }
        });*/

        // click event on tissuTypes
        jQuery('.tissu-types .option').click(function(event){
            //event.preventDefault();
            selectedTypeTissuIndex = $(this).attr('value');
            // bind click behaviour to new loaded switcher-labels (which are tissues)
            $('#attribute963_switchers .switcher-label').click( function(event) {
                selectedTissuIndex = $(this).attr('value');
                //alert(selectedTissuIndex);

                $(this).parent().find('.attributeOption').removeClass('attributeOption_selected');
                $(this).find('.attributeOption').addClass('attributeOption_selected');

                loadSelectedTissuResources();
                updateRendredProduct();
            });

            // bind for each new created label element
            $('.switcher-field label').click(function(){
                $(this).parent().find('label').removeClass('selected');
                $(this).addClass('selected');
            });

            // recreate navigationElements for switcherFields
            bindNavigationArrowsToBlocks();

            // automaticly load first tissu of the tissu-category
            $('#attribute963_switchers .switcher-label')[0].click();
        });

        $('#customizer-canvas-backView').hover(
            function(){
                _canvas_frontView = document.getElementById('customizer-canvas-backView');
                _canvas_backView  = document.getElementById('customizer-canvas-frontView');
                updateRendredProduct();
            },
            function(){
                _canvas_frontView = document.getElementById('customizer-canvas-frontView');
                _canvas_backView = document.getElementById('customizer-canvas-backView');
                updateRendredProduct();
            }
        );

        _init();
        jQuery('.tissu-types .option')[0].click();
        bindNavigationArrowsToBlocks();
        loadSelectionData(); // load of a saved selection data
        //updateRendredProduct();

    });
</script>

<script>
    // util function used in the
    Array.prototype.remove = function() {
        var what, a = arguments, L = a.length, ax;
        while (L && this.length) {
            what = a[--L];
            while ((ax = this.indexOf(what)) !== -1) {
                this.splice(ax, 1);
            }
        }
        return this;
    };
</script>

<?php endif; ?>

<div class="clear"></div>

<?php
?>